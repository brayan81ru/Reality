#include "common.fxh"
#include "oit.fxh"

cbuffer cbConstants
{
    Constants g_Constants;
}

StructuredBuffer<uint> g_OITLayers;
Texture2D<float4>      g_OITTail;

struct PSOutput
{
    float4 Color : SV_TARGET;
};

void main(in PSInput   PSIn,
          out PSOutput PSOut)
{
    float4 Color;
    Color.rgb = ComputeLighting(PSIn.Color.rgb, PSIn.Normal, g_Constants.LightDir.xyz);
    Color.a   = lerp(g_Constants.MinOpacity, g_Constants.MaxOpacity, PSIn.Color.a);
    Color.rgb *= Color.a;
    if (Color.a > OPACITY_THRESHOLD)
    {
        float Depth = PSIn.Pos.z;
        uint D = uint(Depth * 16777215.0);
        float T = 1.0;
    
        uint Offset = GetOITLayerDataOffset(uint2(PSIn.Pos.xy), g_Constants.ScreenSize);

        uint layer = 0u;
        while (layer < uint(NUM_OIT_LAYERS))
        {
            uint LayerDT = g_OITLayers[Offset + layer];
            uint LayerD = GetOITLayerDepth(LayerDT);
            // +1u helps to avoid precision issues.
            if (D <= LayerD + 1u)
            {
                break;
            }
            float LayerT = GetOITLayerTransmittance(LayerDT);
            T *= LayerT;
            ++layer;
        }
        if (layer == uint(NUM_OIT_LAYERS))
        {
            float4 Tail = g_OITTail.Load(int3(PSIn.Pos.xy, 0));
            // Average contribution of all tail layers.
            T /= max(255.0 * Tail.x, 1.0);
        }

        Color.rgb *= T;
    }

#if CONVERT_PS_OUTPUT_TO_GAMMA
    // Use fast approximation for gamma correction.
    Color.rgb = pow(Color.rgb, float3(1.0 / 2.2, 1.0 / 2.2, 1.0 / 2.2));
#endif
    // RGB Blend: Src * 1 + Dst * 1
    PSOut.Color = Color;
}
